# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import main_pb2 as main__pb2


class ItineraryServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/ItineraryServices/CreateUser',
                request_serializer=main__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=main__pb2.User.FromString,
                )
        self.GetUserStatuses = channel.unary_unary(
                '/ItineraryServices/GetUserStatuses',
                request_serializer=main__pb2.EmptyRequest.SerializeToString,
                response_deserializer=main__pb2.Statuses.FromString,
                )
        self.GetAllStates = channel.unary_unary(
                '/ItineraryServices/GetAllStates',
                request_serializer=main__pb2.EmptyRequest.SerializeToString,
                response_deserializer=main__pb2.States.FromString,
                )
        self.GetStatesByType = channel.unary_unary(
                '/ItineraryServices/GetStatesByType',
                request_serializer=main__pb2.StateTypeId.SerializeToString,
                response_deserializer=main__pb2.States.FromString,
                )
        self.GetStateTypes = channel.unary_unary(
                '/ItineraryServices/GetStateTypes',
                request_serializer=main__pb2.EmptyRequest.SerializeToString,
                response_deserializer=main__pb2.StateTypes.FromString,
                )
        self.GetStateById = channel.unary_unary(
                '/ItineraryServices/GetStateById',
                request_serializer=main__pb2.StateId.SerializeToString,
                response_deserializer=main__pb2.State.FromString,
                )
        self.GetTouristPlacesInState = channel.unary_unary(
                '/ItineraryServices/GetTouristPlacesInState',
                request_serializer=main__pb2.StateId.SerializeToString,
                response_deserializer=main__pb2.TouristPlaces.FromString,
                )
        self.GetTouristPlaceById = channel.unary_unary(
                '/ItineraryServices/GetTouristPlaceById',
                request_serializer=main__pb2.TouristPlaceId.SerializeToString,
                response_deserializer=main__pb2.TouristPlace.FromString,
                )
        self.GetFavoritesOfUser = channel.unary_unary(
                '/ItineraryServices/GetFavoritesOfUser',
                request_serializer=main__pb2.UserId.SerializeToString,
                response_deserializer=main__pb2.Favorites.FromString,
                )
        self.AddToFavoritesOfUser = channel.unary_unary(
                '/ItineraryServices/AddToFavoritesOfUser',
                request_serializer=main__pb2.AddFavoriteRequest.SerializeToString,
                response_deserializer=main__pb2.Favorite.FromString,
                )
        self.DeleteFromFavoritesOfUser = channel.unary_unary(
                '/ItineraryServices/DeleteFromFavoritesOfUser',
                request_serializer=main__pb2.FavoriteId.SerializeToString,
                response_deserializer=main__pb2.Favorite.FromString,
                )
        self.GetItinerariesOfUser = channel.unary_unary(
                '/ItineraryServices/GetItinerariesOfUser',
                request_serializer=main__pb2.UserId.SerializeToString,
                response_deserializer=main__pb2.Itineraries.FromString,
                )
        self.CreateItinerary = channel.unary_unary(
                '/ItineraryServices/CreateItinerary',
                request_serializer=main__pb2.AddItineraryRequest.SerializeToString,
                response_deserializer=main__pb2.Itinerary.FromString,
                )
        self.DeleteItinerary = channel.unary_unary(
                '/ItineraryServices/DeleteItinerary',
                request_serializer=main__pb2.ItineraryId.SerializeToString,
                response_deserializer=main__pb2.Itinerary.FromString,
                )
        self.UpdateItinerary = channel.unary_unary(
                '/ItineraryServices/UpdateItinerary',
                request_serializer=main__pb2.UpdateItineraryRequest.SerializeToString,
                response_deserializer=main__pb2.Itinerary.FromString,
                )
        self.GetItinerary = channel.unary_unary(
                '/ItineraryServices/GetItinerary',
                request_serializer=main__pb2.ItineraryId.SerializeToString,
                response_deserializer=main__pb2.Itinerary.FromString,
                )
        self.AddPlaceToItinerary = channel.unary_unary(
                '/ItineraryServices/AddPlaceToItinerary',
                request_serializer=main__pb2.AddItineraryPlaceRequest.SerializeToString,
                response_deserializer=main__pb2.ItineraryPlace.FromString,
                )
        self.UpdatePlaceInItinerary = channel.unary_unary(
                '/ItineraryServices/UpdatePlaceInItinerary',
                request_serializer=main__pb2.UpdateItineraryPlaceRequest.SerializeToString,
                response_deserializer=main__pb2.ItineraryPlace.FromString,
                )
        self.GetItineraryPlacesByDateAndId = channel.unary_unary(
                '/ItineraryServices/GetItineraryPlacesByDateAndId',
                request_serializer=main__pb2.GetItineraryPlacesRequest.SerializeToString,
                response_deserializer=main__pb2.ItineraryPlaces.FromString,
                )
        self.DeletePlaceInItinerary = channel.unary_unary(
                '/ItineraryServices/DeletePlaceInItinerary',
                request_serializer=main__pb2.ItineraryPlaceId.SerializeToString,
                response_deserializer=main__pb2.EmptyResponse.FromString,
                )
        self.GetExpensesOfItinerary = channel.unary_unary(
                '/ItineraryServices/GetExpensesOfItinerary',
                request_serializer=main__pb2.ItineraryId.SerializeToString,
                response_deserializer=main__pb2.Expenses.FromString,
                )
        self.AddExpenseToItinerary = channel.unary_unary(
                '/ItineraryServices/AddExpenseToItinerary',
                request_serializer=main__pb2.AddExpenseRequest.SerializeToString,
                response_deserializer=main__pb2.Expense.FromString,
                )
        self.GetRemainingBudget = channel.unary_unary(
                '/ItineraryServices/GetRemainingBudget',
                request_serializer=main__pb2.ItineraryId.SerializeToString,
                response_deserializer=main__pb2.RemainingBudget.FromString,
                )
        self.GetExpenseCategories = channel.unary_unary(
                '/ItineraryServices/GetExpenseCategories',
                request_serializer=main__pb2.EmptyRequest.SerializeToString,
                response_deserializer=main__pb2.ExpenseCategories.FromString,
                )


class ItineraryServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllStates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatesByType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStateTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStateById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTouristPlacesInState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTouristPlaceById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFavoritesOfUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToFavoritesOfUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFromFavoritesOfUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItinerariesOfUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPlaceToItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePlaceInItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItineraryPlacesByDateAndId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePlaceInItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpensesOfItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddExpenseToItinerary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRemainingBudget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpenseCategories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ItineraryServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=main__pb2.CreateUserRequest.FromString,
                    response_serializer=main__pb2.User.SerializeToString,
            ),
            'GetUserStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserStatuses,
                    request_deserializer=main__pb2.EmptyRequest.FromString,
                    response_serializer=main__pb2.Statuses.SerializeToString,
            ),
            'GetAllStates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllStates,
                    request_deserializer=main__pb2.EmptyRequest.FromString,
                    response_serializer=main__pb2.States.SerializeToString,
            ),
            'GetStatesByType': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatesByType,
                    request_deserializer=main__pb2.StateTypeId.FromString,
                    response_serializer=main__pb2.States.SerializeToString,
            ),
            'GetStateTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStateTypes,
                    request_deserializer=main__pb2.EmptyRequest.FromString,
                    response_serializer=main__pb2.StateTypes.SerializeToString,
            ),
            'GetStateById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStateById,
                    request_deserializer=main__pb2.StateId.FromString,
                    response_serializer=main__pb2.State.SerializeToString,
            ),
            'GetTouristPlacesInState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTouristPlacesInState,
                    request_deserializer=main__pb2.StateId.FromString,
                    response_serializer=main__pb2.TouristPlaces.SerializeToString,
            ),
            'GetTouristPlaceById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTouristPlaceById,
                    request_deserializer=main__pb2.TouristPlaceId.FromString,
                    response_serializer=main__pb2.TouristPlace.SerializeToString,
            ),
            'GetFavoritesOfUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFavoritesOfUser,
                    request_deserializer=main__pb2.UserId.FromString,
                    response_serializer=main__pb2.Favorites.SerializeToString,
            ),
            'AddToFavoritesOfUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToFavoritesOfUser,
                    request_deserializer=main__pb2.AddFavoriteRequest.FromString,
                    response_serializer=main__pb2.Favorite.SerializeToString,
            ),
            'DeleteFromFavoritesOfUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFromFavoritesOfUser,
                    request_deserializer=main__pb2.FavoriteId.FromString,
                    response_serializer=main__pb2.Favorite.SerializeToString,
            ),
            'GetItinerariesOfUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItinerariesOfUser,
                    request_deserializer=main__pb2.UserId.FromString,
                    response_serializer=main__pb2.Itineraries.SerializeToString,
            ),
            'CreateItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateItinerary,
                    request_deserializer=main__pb2.AddItineraryRequest.FromString,
                    response_serializer=main__pb2.Itinerary.SerializeToString,
            ),
            'DeleteItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItinerary,
                    request_deserializer=main__pb2.ItineraryId.FromString,
                    response_serializer=main__pb2.Itinerary.SerializeToString,
            ),
            'UpdateItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItinerary,
                    request_deserializer=main__pb2.UpdateItineraryRequest.FromString,
                    response_serializer=main__pb2.Itinerary.SerializeToString,
            ),
            'GetItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItinerary,
                    request_deserializer=main__pb2.ItineraryId.FromString,
                    response_serializer=main__pb2.Itinerary.SerializeToString,
            ),
            'AddPlaceToItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPlaceToItinerary,
                    request_deserializer=main__pb2.AddItineraryPlaceRequest.FromString,
                    response_serializer=main__pb2.ItineraryPlace.SerializeToString,
            ),
            'UpdatePlaceInItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePlaceInItinerary,
                    request_deserializer=main__pb2.UpdateItineraryPlaceRequest.FromString,
                    response_serializer=main__pb2.ItineraryPlace.SerializeToString,
            ),
            'GetItineraryPlacesByDateAndId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItineraryPlacesByDateAndId,
                    request_deserializer=main__pb2.GetItineraryPlacesRequest.FromString,
                    response_serializer=main__pb2.ItineraryPlaces.SerializeToString,
            ),
            'DeletePlaceInItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePlaceInItinerary,
                    request_deserializer=main__pb2.ItineraryPlaceId.FromString,
                    response_serializer=main__pb2.EmptyResponse.SerializeToString,
            ),
            'GetExpensesOfItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExpensesOfItinerary,
                    request_deserializer=main__pb2.ItineraryId.FromString,
                    response_serializer=main__pb2.Expenses.SerializeToString,
            ),
            'AddExpenseToItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.AddExpenseToItinerary,
                    request_deserializer=main__pb2.AddExpenseRequest.FromString,
                    response_serializer=main__pb2.Expense.SerializeToString,
            ),
            'GetRemainingBudget': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRemainingBudget,
                    request_deserializer=main__pb2.ItineraryId.FromString,
                    response_serializer=main__pb2.RemainingBudget.SerializeToString,
            ),
            'GetExpenseCategories': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExpenseCategories,
                    request_deserializer=main__pb2.EmptyRequest.FromString,
                    response_serializer=main__pb2.ExpenseCategories.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ItineraryServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ItineraryServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/CreateUser',
            main__pb2.CreateUserRequest.SerializeToString,
            main__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetUserStatuses',
            main__pb2.EmptyRequest.SerializeToString,
            main__pb2.Statuses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetAllStates',
            main__pb2.EmptyRequest.SerializeToString,
            main__pb2.States.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatesByType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetStatesByType',
            main__pb2.StateTypeId.SerializeToString,
            main__pb2.States.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStateTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetStateTypes',
            main__pb2.EmptyRequest.SerializeToString,
            main__pb2.StateTypes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStateById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetStateById',
            main__pb2.StateId.SerializeToString,
            main__pb2.State.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTouristPlacesInState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetTouristPlacesInState',
            main__pb2.StateId.SerializeToString,
            main__pb2.TouristPlaces.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTouristPlaceById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetTouristPlaceById',
            main__pb2.TouristPlaceId.SerializeToString,
            main__pb2.TouristPlace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFavoritesOfUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetFavoritesOfUser',
            main__pb2.UserId.SerializeToString,
            main__pb2.Favorites.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToFavoritesOfUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/AddToFavoritesOfUser',
            main__pb2.AddFavoriteRequest.SerializeToString,
            main__pb2.Favorite.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFromFavoritesOfUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/DeleteFromFavoritesOfUser',
            main__pb2.FavoriteId.SerializeToString,
            main__pb2.Favorite.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItinerariesOfUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetItinerariesOfUser',
            main__pb2.UserId.SerializeToString,
            main__pb2.Itineraries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/CreateItinerary',
            main__pb2.AddItineraryRequest.SerializeToString,
            main__pb2.Itinerary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/DeleteItinerary',
            main__pb2.ItineraryId.SerializeToString,
            main__pb2.Itinerary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/UpdateItinerary',
            main__pb2.UpdateItineraryRequest.SerializeToString,
            main__pb2.Itinerary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetItinerary',
            main__pb2.ItineraryId.SerializeToString,
            main__pb2.Itinerary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPlaceToItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/AddPlaceToItinerary',
            main__pb2.AddItineraryPlaceRequest.SerializeToString,
            main__pb2.ItineraryPlace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePlaceInItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/UpdatePlaceInItinerary',
            main__pb2.UpdateItineraryPlaceRequest.SerializeToString,
            main__pb2.ItineraryPlace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItineraryPlacesByDateAndId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetItineraryPlacesByDateAndId',
            main__pb2.GetItineraryPlacesRequest.SerializeToString,
            main__pb2.ItineraryPlaces.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePlaceInItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/DeletePlaceInItinerary',
            main__pb2.ItineraryPlaceId.SerializeToString,
            main__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpensesOfItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetExpensesOfItinerary',
            main__pb2.ItineraryId.SerializeToString,
            main__pb2.Expenses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddExpenseToItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/AddExpenseToItinerary',
            main__pb2.AddExpenseRequest.SerializeToString,
            main__pb2.Expense.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRemainingBudget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetRemainingBudget',
            main__pb2.ItineraryId.SerializeToString,
            main__pb2.RemainingBudget.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpenseCategories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ItineraryServices/GetExpenseCategories',
            main__pb2.EmptyRequest.SerializeToString,
            main__pb2.ExpenseCategories.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
